[risk_score_user(3)]
args = impact,confidence,object
definition = |eval risk_object_type="user"\
|eval risk_object=$object$\
|eval risk_rule_impact=lower($impact$)\
|eval risk_rule_confidence=lower($confidence$)\
|lookup rba_impact label as risk_rule_impact OUTPUT value as risk_rule_impact_num\
|lookup rba_confidence label as risk_rule_confidence OUTPUT value as risk_rule_confidence_num\
| eval risk_mod_count=0 \
| eval risk_mod_count=if(like(user_category,"%privileged%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_category,"%service-account%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_category,"%contractor%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_category,"%executive_assistant%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_category,"%executive%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_category,"%watchlist%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_bunit,"%Executives%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(watchlist="true",risk_mod_count+1,risk_mod_count) \
|rename risk_mod_count as risk_modifier_count_user \
|fillnull risk_modifier_count_user\
|eval risk_score=risk_rule_impact_num * risk_rule_confidence_num * ((risk_modifier_count_user * .25)+1)\
|collect index=risk
iseval = 0

[risk_score_system(5)]
args = impact,confidence,object,system_category,system_priority
definition = |eval risk_object_type="system"\
|eval risk_system_category=lower($system_category$)\
|eval risk_system_priority=lower($system_priority$)\
|eval risk_object=$object$\
|eval risk_rule_impact=lower($impact$)\
|eval risk_rule_confidence=lower($confidence$)\
|lookup rba_impact label as risk_rule_impact OUTPUT value as risk_rule_impact_num\
|lookup rba_confidence label as risk_rule_confidence OUTPUT value as risk_rule_confidence_num\
|eval risk_modifier_count_vuln=dont_have_this_data_but_would_increase_by_1_for_each_critical_vuln \
|eval risk_modifier_count_vuln=0 \
|eval risk_mod_count=0 \
|eval risk_mod_count=if(like(risk_system_category,"%pci%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_system_category,"%production%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_system_category,"%database%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if((risk_system_priority="critical" OR risk_system_priority="high"),risk_mod_count+1,risk_mod_count) \
|rename risk_mod_count as risk_modifier_count_system \
|eval risk_modifier_count_system=risk_modifier_count_system+risk_modifier_count_vuln \
|fillnull risk_modifier_count_system\
|eval risk_score=risk_rule_impact_num * risk_rule_confidence_num * ((risk_modifier_count_system * .25)+1)\
|collect index=risk
iseval = 0

[risk_score_user(4)]
args = impact,confidence,object,category
definition = |eval risk_object_type="user"\
|eval risk_object=$object$\
|eval risk_rule_impact=lower($impact$)\
|eval risk_rule_confidence=lower($confidence$)\
|eval risk_user_category=$category$\
|lookup rba_impact label as risk_rule_impact OUTPUT value as risk_rule_impact_num\
|lookup rba_confidence label as risk_rule_confidence OUTPUT value as risk_rule_confidence_num\
| eval risk_mod_count=0 \
| eval risk_mod_count=if(like(risk_user_category,"%privileged%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(risk_user_category,"%service-account%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(risk_user_category,"%contractor%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(risk_user_category,"%executive_assistant%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(risk_user_category,"%executive%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(risk_user_category,"%watchlist%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(like(user_bunit,"%Executives%"),risk_mod_count+1,risk_mod_count) \
| eval risk_mod_count=if(watchlist="true",risk_mod_count+1,risk_mod_count) \
|rename risk_mod_count as risk_modifier_count_user \
|fillnull risk_modifier_count_user\
|eval risk_score=risk_rule_impact_num * risk_rule_confidence_num * ((risk_modifier_count_user * .25)+1)\
|collect index=risk
iseval = 0

[risk_score_combined(7)]
args = impact,confidence,user_object,user_category,system_object,system_category,system_priority
definition = |eval risk_rule_impact=lower("$impact$")\
|eval risk_rule_confidence=lower("$confidence$")\
|eval risk_system_category=$system_category$\
|eval risk_system_priority=$system_priority$\
|eval risk_user_category=$user_category$\
|lookup rba_impact label as risk_rule_impact OUTPUT value as risk_rule_impact_num\
|lookup rba_confidence label as risk_rule_confidence OUTPUT value as risk_rule_confidence_num\
\
|eval risk_mod_count=0 \
|eval risk_mod_count=if(like(risk_user_category,"%privileged%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_user_category,"%service-account%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_user_category,"%contractor%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_user_category,"%executive_assistant%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_user_category,"%executive%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_user_category,"%watchlist%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(user_bunit,"%Executives%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(watchlist="true",risk_mod_count+1,risk_mod_count) \
|rename risk_mod_count as risk_modifier_count_user \
|fillnull risk_modifier_count_user\
\
|eval risk_modifier_count_vuln=dont_have_this_data_but_would_increase_by_1_for_each_critical_vuln \
|eval risk_modifier_count_vuln=0 \
|eval risk_mod_count=0 \
|eval src_category="pci"\
|eval risk_mod_count=if(like(risk_system_category,"%pci%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_system_category,"%production%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if(like(risk_system_category,"%database%"),risk_mod_count+1,risk_mod_count) \
|eval risk_mod_count=if((risk_system_priority="critical" OR risk_system_priority="high"),risk_mod_count+1,risk_mod_count) \
|rename risk_mod_count as risk_modifier_count_system \
|eval risk_modifier_count_system=risk_modifier_count_system+risk_modifier_count_vuln \
|fillnull risk_modifier_count_system\
\
|eval risk_modifier_count_combined=risk_modifier_count_system+risk_modifier_count_user\
\
|eval risk_score=risk_rule_impact_num * risk_rule_confidence_num * ((risk_modifier_count_combined * .25)+1)\
\
|eval risk_object_type="user"\
|eval risk_object=$user_object$\
|collect index=risk\
\
|eval risk_object_type="system"\
|eval risk_object=$system_object$\
|collect index=risk
iseval = 0

[rr1(1)]
args = field_object
definition = from datamodel:"Endpoint"."Processes"\
|search _time < 1501848000 host=$field_object$\
|lookup interesting_processes_lookup app as process,dest OUTPUTNEW is_required,is_prohibited,is_secure,note \
| fillnull value="undefined" is_required,is_prohibited,is_secure \
|`lower(is_required)` \
|`lower(is_prohibited)` \
|`lower(is_secure)` \
| search is_prohibited=true \
|eval rule_attack_tactic_technique="defense_evasion - T1036 - Masquerading - https://attack.mitre.org/techniques/T1036/|stage_capabilities - T1362 - Upload, install, and configure software/tools - https://attack.mitre.org/techniques/T1362/"\
|eval risk_message="Prohibited Process Detected (".process.") on host=".dest
iseval = 0

[rr7(1)]
args = field_object
definition = search index="botsv2" sourcetype=osquery_results  TERM(USB) name="pack_hardware-monitoring_usb_devices" action="added" (host=$field_object$ OR user=$field_object$)\
|eval rule_attack_tactic_technique=\
"initial_access - T1200 - Hardware Additions - https://attack.mitre.org/techniques/T1200/\
|initial_access - T1091 - Replication Through Removable Media - https://attack.mitre.org/techniques/T1091/\
|lateral_movement - T1091 - Data from Removable Media - https://attack.mitre.org/techniques/T1025/\
|collection - T1025 - Replication Through Removable Media - https://attack.mitre.org/techniques/T1091/\
|exfiltration - T1052 - Exfiltration Over Physical Medium - https://attack.mitre.org/techniques/T1052/\
|command_and_control - T1092 - Communication Through Removable Media - https://attack.mitre.org/techniques/T1092/"\
|eventstats earliest_time(_time) as ET by columns.vendor_id\
|eval firstSeen=strftime(ET,"%T %D")\
|where ET > relative_time(1501762500, "-1h@h" )
iseval = 0

[rr5(1)]
args = field_object
definition = from datamodel:Network_Resolution.DNS | search _time < 1501848001 record_type="A" `Exclude_DNS_Server_src_ip`\
| eval list="iana" | `ut_parse(query,list)`\
| lookup local_domain_intel domain as ut_domain OUTPUT description \
| search description=* \
| lookup dhcpLogs dest_ip as src OUTPUT dest_nt_host as host\
|search host=$field_object$\
|eval risk_message="DNS request to locally sourced domain IOC (".ut_domain."). Query=".query.". Threat Intel Desc=".description
iseval = 0

[rr2(1)]
args = field_object
definition = from datamodel:Network_Resolution.DNS | search _time < 1501848000 record_type="A" `Exclude_DNS_Server_src_ip` \
|lookup dhcpLogs dest_ip as src OUTPUT dest_nt_host as host\
|search host=$field_object$\
| eval list="iana" \
| `ut_parse(query,list)` \
| lookup DDNS_lookup domain as ut_domain | search provider=* \
|eval rule_attack_tactic_technique=\
"establish_and_maintain_infrastructure - T1333 - Dynamic DNS - https://attack.mitre.org/techniques/T1333/\
|command_and_control - T1071 - Standard Application Layer Protocol - https://attack.mitre.org/techniques/T1071/\
|adversary_opsec - T1311 - Dynamic DNS - https://attack.mitre.org/techniques/T1311/" \
\
|eval risk_message="DDNS activity detected (".ut_domain.") via query=".query." and provider=".provider
iseval = 0

[rr3(1)]
args = field_object
definition = from datamodel:Network_Traffic |search dest_port=53 src_ip!=TERM(10.0.1.100) dest_ip!=TERM(10.0.1.100) dest_ip!=TERM(8.8.8.8) dest_ip!=TERM(4.4.4.4) dest_ip!=TERM(172.31.0.2) \
|lookup frothly_assets ip as src_ip\
|search nt_host=$field_object$\
|eval rule_attack_tactic_technique="command_and_control -  T1043 - Commonly Used Port - https://attack.mitre.org/techniques/T1043/" \
|eval risk_message="Prohibited DNS activity to external IP (".dest_ip.") by system=".nt_host
iseval = 0

[rr4(1)]
args = field_object
definition = search index=botsv2 sourcetype=osquery_results columns.cwd="/Users*" host=kutekitten\
| rename columns.name as name, columns.cmdline as cmdline\
| eval dest=host, result=if(like(cmdline,"%".name."%"),"Normal","Evil")  \
|search result="Evil"\
|eval rule_attack_tactic_technique="defense_evasion - T1036 - Masquerading - https://attack.mitre.org/techniques/T1036/"\
|eval risk_message="Process Discrepancy (".cmdline." as ".name.") on system=".dest
iseval = 0

[rr6(1)]
args = field_object
definition = search index="botsv2" sourcetype=osquery_results  TERM(USB) name="pack_hardware-monitoring_usb_devices" action="added" (host=$field_object$ OR user=$field_object$) \
|eval rule_attack_tactic_technique=\
"initial_access - T1200 - Hardware Additions - https://attack.mitre.org/techniques/T1200/\
|initial_access - T1091 - Replication Through Removable Media - https://attack.mitre.org/techniques/T1091/\
|lateral_movement - T1091 - Data from Removable Media - https://attack.mitre.org/techniques/T1025/\
|collection - T1025 - Replication Through Removable Media - https://attack.mitre.org/techniques/T1091/\
|exfiltration - T1052 - Exfiltration Over Physical Medium - https://attack.mitre.org/techniques/T1052/\
|command_and_control - T1092 - Communication Through Removable Media - https://attack.mitre.org/techniques/T1092/"\
|eventstats earliest_time(_time) as ET by columns.serial\
|eval firstSeen=strftime(ET,"%T %D")\
|where ET > relative_time(1501762500, "-1h@h" )\
|eval risk_message="USB Insertion with 1st time seen serial number (".'columns.serial'."). Vendor=".'columns.vendor_id'
iseval = 0

[next_cron_occurrence(2)]
args = event_time,cron_exp
definition = | eval temp_event_time=$event_time$\
| eval temp_cron_exp=$cron_exp$\
\
| makemv delim=" " temp_event_time\
| makemv delim=" " temp_cron_exp\
\
\
| eval new_hour=if(like(mvindex(temp_cron_exp,1),"%/%"),ceil(tonumber(mvindex(temp_event_time,1))/tonumber(mvindex(split(mvindex(temp_cron_exp,1),"/"),1)))*tonumber(mvindex(split(mvindex(temp_cron_exp,1),"/"),1)),if(mvindex(temp_cron_exp,1)="*",tonumber(mvindex(temp_event_time,1)),mvindex(temp_cron_exp,1)))\
\
| eval new_day=if(like(mvindex(temp_cron_exp,2),"%/%"),ceil(tonumber(mvindex(temp_event_time,2))/tonumber(mvindex(split(mvindex(temp_cron_exp,2),"/"),1)))*tonumber(mvindex(split(mvindex(temp_cron_exp,2),"/"),1)),if(mvindex(temp_cron_exp,2)="*",tonumber(mvindex(temp_event_time,2)),mvindex(temp_cron_exp,2)))
iseval = 0

[rr9(1)]
args = field_object
definition = from datamodel:Intrusion_Detection.IDS_Attacks \
| search signature!="unknown" \
    [| search index=risk source="Threat - RR - Intrusion Detection Event - System - Rule" risk_object="$field_object$" \
    | fields src_ip \
    | dedup src_ip \
    | rename src_ip as src] \
| rex field=_raw "dest_ip.:.(?<dest_ip>[^\"]*?)\".*?dest_port.:(?<dest_port>\d+).*payload.:.(?<payload>[^\"]*)\""
iseval = 0

[rr10(1)]
args = field_object
definition = from datamodel:Network_Traffic.All_Traffic \
| search duration>10800\
[| search index=risk source="Threat - RR - Long Network Connection - System - Rule" risk_object="$field_object$" \
    | fields src_ip,dest_ip \
    | dedup src_ip,dest_ip]
iseval = 0

[rr11(1)]
args = field_object
definition = from datamodel:Web.Web\
| search src="10.*" dest!="10.*"\
\
| eval list="mozilla" \
| `ut_parse_extended(url,list)`\
| where ut_port!="80" AND ut_port!="443"\
\
| rename src as src_ip, dest as dest_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| lookup dnslookup clientip as dest_ip OUTPUT clienthost as dest_dns\
| eval dest_system=coalesce(dest_dns,dest_ip) \
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
|search src_system=$field_object$
iseval = 0

[rr12(1)]
args = field_object
definition = search index=botsv2 sourcetype="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" cmdline="*netsh.exe*" cmdline="*off*"\
\
| rename dvc_ip as src_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
\
| eval src_user=mvindex(split(user,"\\"),1)\
|search src_system=$field_object$ OR src_user=$field_object$
iseval = 0

[rr13(1)]
args = field_object
definition = search index=botsv2 sourcetype="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" cmdline="*csc.exe*/noconfig*"\
\
| rename dvc_ip as src_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
\
| eval src_user=mvindex(split(user,"\\"),1)\
|search src_system=$field_object$ OR src_user=$field_object$
iseval = 0

[rr14(1)]
args = field_object
definition = search index=botsv2 sourcetype="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" cmdline="*powershell*-nop*"\
\
| rename dvc_ip as src_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
\
| eval src_user=mvindex(split(user,"\\"),1)\
|search src_system=$field_object$ OR src_user=$field_object$
iseval = 0

[rr15(1)]
args = field_object
definition = search index=botsv2 sourcetype="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" process="schtasks.exe" cmdline="*-w hidden*"\
\
| rename dvc_ip as src_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
\
| eval src_user=mvindex(split(user,"\\"),1)\
|search src_system=$field_object$ OR src_user=$field_object$
iseval = 0

[rr16(1)]
args = field_object
definition = from datamodel:Certificates.SSL \
| search ssl_subject!="*CN \=*" ssl_subject!="*O \=*"\
[| search index=risk source="Threat - RR - Suspicious SSL Certificate - System - Rule" risk_object="$field_object$" \
    | fields src_ip,dest_ip \
    | dedup src_ip,dest_ip\
    | rename src_ip as src, dest_ip as dest]
iseval = 0

[rr17(1)]
args = field_object
definition = search index=botsv2 sourcetype="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" (process="net.exe" OR process="whoami.exe") cmdline="*"\
\
| rename dvc_ip as src_ip\
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_system\
| eval src_system=coalesce(src_system,src_ip)\
\
| eval src_user=mvindex(split(user,"\\"),1)\
|search src_user=$field_object$ OR src_system=$field_object$
iseval = 0

[rr18(1)]
args = field_object
definition = from datamodel:"Threat_Intelligence"."Threat_Activity" \
| search threat_collection="file"\
\
| rename src as src_ip, dest as dest_ip\
| lookup dnslookup clientip as dest_ip OUTPUT clienthost as dest_dns\
| eval dest_system=coalesce(dest_dns,dest_ip) \
| lookup dhcpLogs dest_ip as src_ip OUTPUT dest_nt_host as src_dhcp\
| join type=left src_ip \
    [| inputlookup frothly_assets \
    | fields ip dns \
    | rename ip as src_ip, dns as src_dns\
        ]\
| eval src_system=coalesce(src_dhcp,src_dns,src_ip)\
|search src_system=$field_object$ OR dest_system=$field_object$
iseval = 0

[rr19(1)]
args = field_object
definition = from datamodel:Change_Analysis.Account_Management\
| search (dest="$field_object$" OR src_user="$field_object$")
iseval = 0

[rr8(1)]
args = field_object
definition = from datamodel:Network_Resolution.DNS \
| search record_type=A \
    [| search index=risk source="Threat - RR - DNS Query For Potential DGA Domain - System - Rule" risk_object="$field_object$" \
    | fields src_ip,dest_system \
    | dedup src_ip,dest_system \
    | eval dest_system="*.".dest_system \
    | rename src_ip as src, dest_system as query] \
| mvexpand query \
| eval list="*" \
| `ut_parse_extended(query,list)` \
| lookup dns_exclusions.csv domain AS ut_domain OUTPUT domain \
| search NOT(ut_domain="None" OR domain=*) \
| lookup alexa_lookup_by_str domain AS ut_domain \
| search NOT(rank=*) \
| `ut_shannon(ut_subdomain)` \
| eval subdomain_length=len(tostring(ut_subdomain)) \
| convert num(ut_shannon) as ut_shannon \
| where ut_shannon>3 and subdomain_length>20
iseval = 0

[rr20(1)]
args = field_object
definition = from datamodel:Email.All_Email \
| search (file_name="*.zip" OR file_name="*.doc" OR file_name="*.xls" OR file_name="*.docm" OR file_name="*.xlsm") \
    [| search index=risk source="Threat - RR - Potential Phish With Attachment - User - Rule" risk_object="$field_object$" \
    | fields recipient,sender\
    | dedup recipient,sender\
    | rename sender as src_user]
iseval = 0

[risk_score_system_RBA(5)]
args = impact,confidence,object,system_category,system_priority
definition = |eval risk_object_type="system" |eval risk_system_category=lower($system_category$) |eval risk_system_priority=lower($system_priority$) |eval risk_object=$object$ |eval risk_rule_impact=lower($impact$) |eval risk_rule_confidence=lower($confidence$) |lookup rba_impact label as risk_rule_impact OUTPUT value as risk_rule_impact_num |lookup rba_confidence label as risk_rule_confidence OUTPUT value as risk_rule_confidence_num |eval risk_modifier_count_vuln=dont_have_this_data_but_would_increase_by_1_for_each_critical_vuln |eval risk_modifier_count_vuln=0 |eval risk_mod_count=0 |eval risk_mod_count=if(like(risk_system_category,"%pci%"),risk_mod_count+1,risk_mod_count) |eval risk_mod_count=if(like(risk_system_category,"%production%"),risk_mod_count+1,risk_mod_count) |eval risk_mod_count=if(like(risk_system_category,"%database%"),risk_mod_count+1,risk_mod_count) |eval risk_mod_count=if((risk_system_priority="critical" OR risk_system_priority="high"),risk_mod_count+1,risk_mod_count) |rename risk_mod_count as risk_modifier_count_system |eval risk_modifier_count_system=risk_modifier_count_system+risk_modifier_count_vuln |fillnull risk_modifier_count_system |eval risk_score=risk_rule_impact_num * risk_rule_confidence_num * ((risk_modifier_count_system * .25)+1) |sendalert test_alert_action
iseval = 0
